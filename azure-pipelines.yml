name: $(major).$(minor).$(rev:r)
stages:
  - stage: build
    displayName: Build VSIX
    jobs:
      - job: Build
        pool:
          vmimage: ubuntu-latest
        steps: 
        #- task: Pester@9
        #  inputs:
        #    scriptFolder: '$(System.DefaultWorkingDirectory)\Extension\test\PesterTask'
        #    resultsFile: '$(System.DefaultWorkingDirectory)\Test-Pester.XML'
        #    CodeCoverageOutputFile: '$(System.DefaultWorkingDirectory)\CC-Pester.XML'
        #    usePSCore: False
        #    CodeCoverageFolder: '$(System.DefaultWorkingDirectory)\Extension\Task'
        #    run32Bit: False
        #    PesterVersion: 'OtherVersion'
        #    preferredPesterVersion: '4.10.1'
        #
        #- task: PublishTestResults@2
        #  condition: always()
        #  inputs:
        #    testResultsFiles: '$(System.DefaultWorkingDirectory)\Test-Pester.XML'
        #    testResultsFormat: NUnit
        #    testRunTitle: Pester Extension Build
        #
        #- task: PublishCodeCoverageResults@1
        #  condition: always()
        #  inputs:
        #    codeCoverageTool: JaCoCo
        #    pathToSources: '$(System.DefaultWorkingDirectory)\Extension\Task'
        #    summaryFileLocation: '$(System.DefaultWorkingDirectory)\CC-Pester.XML'

        - task: NodeTool@0
          inputs:
            versionSpec: '10.x'
          displayName: 'Install Node.js'

        - script: |
            npm install
            npm run build
          displayName: 'npm install and build'
          workingDirectory: ./Extension

        - script: |
            npm run package
          workingDirectory: ./Extension

        - task: TfxInstaller@2
          inputs:
            version: 'v0.6.x'

        - task: PackageAzureDevOpsExtension@2
          inputs:
            rootFolder: './Extension'
            outputPath: '$(Build.ArtifactStagingDirectory)/Pester.vsix'
            updateTasksVersion: true
            extensionVersion: "$(Build.BuildNumber)"

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: vsix'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: vsix
